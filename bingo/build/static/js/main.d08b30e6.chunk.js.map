{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","isOpened","key","j","onClick","value","Board","i","_this","this","opened","numArray","_this2","id","map","renderSquare","React","Component","makeArray","bingoArray","colArray","max","min","tmp","Math","floor","random","includes","push","Bingo","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","Array","fill","slice","console","log","concat","setState","opend","_this4","App_Board","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d08b30e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./App.css\"\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className={props.isOpened ? \"openedButton\" : \"\"} key={props.j} onClick={() => props.onClick()}>{props.value}</button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i, j) {\r\n    return <Square isOpened={this.props.opened[i][j]} key={i} j={this.j} value={this.props.numArray[i][j]} onClick={() => this.props.onClick(i, j)} />;\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"board\">\r\n        {\r\n          [0, 1, 2, 3, 4].map((j) => {\r\n            return (\r\n              <div className=\"column\">\r\n                {\r\n                  [0, 1, 2, 3, 4].map((i) =>\r\n                    this.renderSquare(i, j))\r\n                }\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nclass Bingo extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      opened: [\r\n        Array(5).fill(false),\r\n        Array(5).fill(false),\r\n        [false, false, true, false, false],\r\n        Array(5).fill(false),\r\n        Array(5).fill(false),\r\n      ],\r\n      numArray: makeArray(),\r\n    };\r\n  }\r\n  handleClick(i, j) {\r\n    const isOpened = this.state.opened.slice();\r\n    console.log(`(${i},${j}) is clicked`);\r\n    isOpened[i][j] = true;\r\n    this.setState({\r\n      opend: isOpened,\r\n    });\r\n    console.log(this.state.opened);\r\n  };\r\n  render() {\r\n    return (\r\n      <div id=\"wrap\" >\r\n        <section id=\"title\"><p>B</p><p>I</p><p>N</p><p>G</p><p>O</p></section>\r\n        <Board opened={this.state.opened} numArray={this.state.numArray} onClick={(i, j) => this.handleClick(i, j)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction makeArray() {\r\n  let bingoArray = [];\r\n  for (let i = 1; i <= 5; i++) {\r\n    let colArray = [];\r\n    const max = 15 * i;\r\n    const min = 15 * (i - 1) + 1;\r\n    for (let j = 1; j <= 5; j++) {\r\n      while (true) {\r\n        let tmp = Math.floor(Math.random() * (max - min + 1)) + min;\r\n        if (!colArray.includes(tmp)) {\r\n          colArray.push(tmp);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    bingoArray.push(colArray);\r\n  }\r\n  bingoArray[2][2] = null;\r\n  return bingoArray;\r\n}\r\nexport default Bingo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}